<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sonots:io]]></title>
  <link href="http://sonots.github.io/atom.xml" rel="self"/>
  <link href="http://sonots.github.io/"/>
  <updated>2014-05-13T00:37:26+09:00</updated>
  <id>http://sonots.github.io/</id>
  <author>
    <name><![CDATA[Naotoshi Seo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fluentd-server Released!]]></title>
    <link href="http://sonots.github.io/blog/2014/05/12/fluentd-server-released/"/>
    <updated>2014-05-12T19:52:23+09:00</updated>
    <id>http://sonots.github.io/blog/2014/05/12/fluentd-server-released</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/sonots/fluentd-server">Fluentd Server</a>, a Fluentd config distribution server, was released!</p>

<h2>What is Fluentd Server</h2>

<p>I heard as some users of Fluentd want something like chef-server for Fluentd, so I created the fluentd-server.</p>

<p>With Fluentd Server, you can manage fluentd configuration files centrally with erb.</p>

<p>For example, you may create a config whose name is <code>worker</code> as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;source&gt;</span>
</span><span class='line'>  <span class="nb">type</span> forward
</span><span class='line'>  <span class="nb">port</span> &lt;%= port %&gt;
</span><span class='line'><span class="nt">&lt;/source&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;match</span> <span class="s">**</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">type</span> stdout
</span><span class='line'><span class="nt">&lt;/match&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can download the config via an API whose uri is like <code>/api/worker?port=24224</code> where its query parameters are replaced with variables in the erb. The downloaded contents should become as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;source&gt;</span>
</span><span class='line'>  <span class="nb">type</span> forward
</span><span class='line'>  <span class="nb">port</span> <span class="m">24224</span>
</span><span class='line'><span class="nt">&lt;/source&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;match</span> <span class="s">**</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">type</span> stdout
</span><span class='line'><span class="nt">&lt;/match&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How To Use From Fluentd</h2>

<p>The <code>include</code> directive of fluentd config supports <code>http</code>, so write just one line on your fluentd.conf as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="c"># /etc/fluentd.conf</span>
</span><span class='line'><span class="nb">include</span> http://fqdn.to.fluentd-server/api/:name?port=24224
</span></code></pre></td></tr></table></div></figure>


<p>where :name is the name of your config post. Fluentd downloads the configuration from the Fluentd Server.</p>

<p>You can see the specification detail of API at <a href="https://github.com/sonots/fluentd-server/blob/master/API.md">API.md</a>.</p>

<h2>Demo</h2>

<p>I deployed it on heroku, so you can see the demo at <a href="http://fluentd-server.herokuapp.com">http://fluentd-server.herokuapp.com</a>.</p>

<h2>All the end</h2>

<p>Fluentd server is yet under development. Patches are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Norikra vs. InfluxDB]]></title>
    <link href="http://sonots.github.io/blog/2014/05/07/norikra-vs-influxdb/"/>
    <updated>2014-05-07T22:53:08+09:00</updated>
    <id>http://sonots.github.io/blog/2014/05/07/norikra-vs-influxdb</id>
    <content type="html"><![CDATA[<p>Today, I give a comparison between Norikra and InfluxDB in terms of query features.</p>

<h2>Introduction &ndash; What is Norikra, and What is InfluxDB</h2>

<p><a href="http://norikra.github.io/">Norikra</a> is a Schema-less Stream Processor based on Esper, which is a kind of CEP (Complex Event Processing) engine. With Norikra, we can use highly-functional SQL-like query for processing time series streaming data.</p>

<p><a href="http://influxdb.org/">InfluxDB</a> is a distributed time series database, which has a SQL-like query language designed for working with time series and analytics.
It has a feature called &ldquo;Continuous Query&rdquo; which applies queries charged in advance, and stores the resulted data into a Series (which is like a &ldquo;table&rdquo; of RDBMS) progressively.</p>

<p>It looks both can do similar things.</p>

<p>So, I compared Norikra and InfluxDB in terms of query features. I felt that it would be nice to use InfluxDB if it has sufficent query features because it can also be used for data persistence.</p>

<h2>TL; DR</h2>

<p>Norikra won</p>

<h2>Feature Catalog</h2>

<p>I just write catalog tables here.</p>

<h3>SQL Fuctions</h3>

<table>
<thead>
<tr>
<th align="left">Function   </th>
<th align="left"> Norikra </th>
<th align="left"> InfluxDB </th>
<th align="left"> NOTE                        </th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">COUNT      </td>
<td align="left"> YES     </td>
<td align="left"> YES      </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">MIN        </td>
<td align="left"> YES     </td>
<td align="left"> YES      </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">MAX        </td>
<td align="left"> YES     </td>
<td align="left"> YES      </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">AVG        </td>
<td align="left"> YES     </td>
<td align="left"> YES      </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">MEAN       </td>
<td align="left"> YES     </td>
<td align="left"> YES      </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">MODE       </td>
<td align="left"> NO      </td>
<td align="left"> YES      </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">MEDIAN     </td>
<td align="left"> NO      </td>
<td align="left"> YES      </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">DISTINCT   </td>
<td align="left"> YES     </td>
<td align="left"> YES      </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">PERCENTILE </td>
<td align="left"> YES     </td>
<td align="left"> YES      </td>
<td align="left"> Norikra <a href="https//github.com/norikra/norikra-udf-percentile">implemented</a> as a UDF</td>
</tr>
<tr>
<td align="left">HISTOGRAM  </td>
<td align="left"> NO      </td>
<td align="left"> YES      </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">DERIVATIVE </td>
<td align="left"> NO      </td>
<td align="left"> YES      </td>
<td align="left">                              </td>
</tr>
<tr>
<td align="left">SUM        </td>
<td align="left"> YES     </td>
<td align="left"> YES      </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">STDDEV     </td>
<td align="left"> NO      </td>
<td align="left"> YES      </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">FIRST      </td>
<td align="left"> YES     </td>
<td align="left"> YES      </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">LAST       </td>
<td align="left"> YES     </td>
<td align="left"> YES      </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">MAXBY      </td>
<td align="left"> YES     </td>
<td align="left"> NO       </td>
<td align="left">                             </td>
</tr>
<tr>
<td align="left">MINBY      </td>
<td align="left"> YES     </td>
<td align="left"> NO       </td>
<td align="left">                             </td>
</tr>
</tbody>
</table>


<p>NOTE: Norikra supports UDF, so users can create functions by themselves if they want</p>

<h3>SQL Features</h3>

<table>
<thead>
<tr>
<th>Feature                       </th>
<th> Norikra </th>
<th> InfluxDB </th>
<th> NOTE                                                              </th>
</tr>
</thead>
<tbody>
<tr>
<td>Time batch window             </td>
<td> YES     </td>
<td> YES      </td>
<td> Of course, both support the feature to process periodically</td>
</tr>
<tr>
<td>Externally timed batch window </td>
<td> YES     </td>
<td> NO       </td>
<td> A feature to process data based on the time field of messages        </td>
</tr>
<tr>
<td>Sub query                     </td>
<td> YES     </td>
<td> NO       </td>
<td>                                                                   </td>
</tr>
<tr>
<td>JOIN                          </td>
<td> YES     </td>
<td> YES      </td>
<td>                                                                   </td>
</tr>
<tr>
<td>MERGE                         </td>
<td> NO      </td>
<td> YES      </td>
<td> A feature of InfluxDB to merge results from multiple tables. One can use regular expressions to specify tables</td>
</tr>
<tr>
<td>Query group                   </td>
<td> YES     </td>
<td> NO       </td>
<td> Make a group for queries                                          </td>
</tr>
<tr>
<td>Program codes                 </td>
<td> YES     </td>
<td> NO       </td>
<td> One can write Java codes on Norikra queries                        </td>
</tr>
<tr>
<td>Nested JSON                   </td>
<td> YES     </td>
<td> NO       </td>
<td> One can specify fields like <code>parrent.child</code> when JSON is nested      </td>
</tr>
<tr>
<td>GROUP BY                      </td>
<td> YES     </td>
<td> YES      </td>
<td>                                                                   </td>
</tr>
<tr>
<td>HAVING                        </td>
<td> YES     </td>
<td> NO       </td>
<td>                                                                   </td>
</tr>
<tr>
<td>ORDER BY                      </td>
<td> YES     </td>
<td> NO       </td>
<td> InfluxDB has <code>order</code>, but it is only for the <code>time</code> field         </td>
</tr>
<tr>
<td>UDF                           </td>
<td> YES     </td>
<td> NO       </td>
<td>                                                                   </td>
</tr>
</tbody>
</table>


<h2>Conclusion</h2>

<p>Norikra won overwhelmingly. That said, because InfluxDB is a storage, but Norikra is an on-memory engine, the value of InfluxDB shall not be impaired in any way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Norikra to Count HTTP Status With Fluentd]]></title>
    <link href="http://sonots.github.io/blog/2014/05/04/how-to-use-norikra-to-count-http-status/"/>
    <updated>2014-05-04T20:13:07+09:00</updated>
    <id>http://sonots.github.io/blog/2014/05/04/how-to-use-norikra-to-count-http-status</id>
    <content type="html"><![CDATA[<p>In this article, I exaplain how to use Norikra to count HTTP status with Fluentd.
Previously, it was common to use <a href="https://github.com/tagomoris/fluent-plugin-datacounter">fluent-plugin-datacounter</a> for the purpose, but,
today I will explain how to achieve the same feature with <a href="http://norikra.github.io/">Norikra</a>.</p>

<p>REMARK: This article is a short translated version of Japanese article written at <a href="http://blog.livedoor.jp/sonots/archives/37921050.html">http://blog.livedoor.jp/sonots/archives/37921050.html</a></p>

<h2>What Not Covered</h2>

<p>In this article, I will not cover, how to install Norikra, how to install Fluentd.</p>

<h2>What is Norikra, and Why to Use Norikra</h2>

<p>Norikra is a Schema-less Stream Processor based on Esper, which is a kind of CEP (Complex Event Processing) engine.
With Norikra, we can use highly-functional SQL-like query for processing streaming data.</p>

<p>We can achieve similar things by using plugins like fluent-plugin-datacounter.
However, a Fluentd process can utilize only one CPU core because Fluentd uses CRuby,
in contrast, a Norikra process can utilize multiple CPU cores because Norikra uses JVM (Esper is wirtten with Java, and Norikra is written with JRuby).
This is the 1st reason to use Norikra. This is attractive especially when we need to processs heavy log data where one CPU core is not sufficient to process it in real-time.</p>

<p>The 2nd reason to use Norikra is because it does not require to restart for adding or removing queries.
Fluentd requires us to restart its processes when we change their configuration files to add or remove new settings.
I need the graceful restart.</p>

<h2>Data Counting using fluent-plugin-datacounter</h2>

<p>Let me describe how to perform data counting using fluent-pugin-datacounter first. We will replace this to Norikra later.</p>

<h3>Requirement</h3>

<p>Assume there is a demand as followings:</p>

<ol>
<li>Want to count HTTP status codes in a specified time interval by seeing status fields written in logs.</li>
<li>Want to count the status code for each host.</li>
<li>Want to count the status code as an aggregation of all hosts.</li>
</ol>


<h3>Specification of Input Data (Log)</h3>

<p>Assume that log data are sent from Fluentd agent with tags like &ldquo;visualizer.<em>logname</em>.<em>hostname</em>&rdquo; where <em>logname</em> stands for an arbitrary string which operation engineers name to distinguish logs.</p>

<p>Also, assume that messages contain <code>time</code>, <code>status</code>, <code>reqtime</code>, <code>method</code>, <code>uri</code> fields.</p>

<p>Example) visualizer.api_restful.host001</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"status":"403","reqtime":"0.123","method":"GET","uri":"http://example.com/v1/restful/people?id=1"}</span></code></pre></td></tr></table></div></figure>


<h3>Configuration</h3>

<p>The status code counting can be achieved with the following configuration using fluent-plugin-datacounter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;source&gt;</span>
</span><span class='line'>  <span class="nb">type</span> forward
</span><span class='line'>  <span class="nb">port</span> <span class="m">24224</span>
</span><span class='line'><span class="nt">&lt;/source&gt;</span>
</span><span class='line'><span class="nt">&lt;match</span> <span class="s">visualizer.api_restful.*</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">type</span> copy
</span><span class='line'>  <span class="c"># for each host</span>
</span><span class='line'>  <span class="nt">&lt;store&gt;</span>
</span><span class='line'>    <span class="nb">type</span> record_reformer
</span><span class='line'>    <span class="nb">enable_ruby</span> false
</span><span class='line'>    <span class="nb">tag</span> ${tag_prefix[-2]}.hosts.${tag_parts[-1]}
</span><span class='line'>  <span class="nt">&lt;/store&gt;</span>
</span><span class='line'>  <span class="c"># for all</span>
</span><span class='line'>  <span class="nt">&lt;store&gt;</span>
</span><span class='line'>    <span class="nb">type</span> record_reformer
</span><span class='line'>    <span class="nb">enable_ruby</span> false
</span><span class='line'>    <span class="nb">tag</span> ${tag_prefix[-2]}.all.all
</span><span class='line'>  <span class="nt">&lt;/store&gt;</span>
</span><span class='line'><span class="nt">&lt;/match&gt;</span>
</span><span class='line'><span class="nt">&lt;match</span> <span class="s">visualizer.api_restful.{hosts,all}.*</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">type</span> datacounter
</span><span class='line'>  <span class="nb">count_interval</span> <span class="m">60</span>
</span><span class='line'>  <span class="nb">aggregate</span> tag
</span><span class='line'>  <span class="nb">tag_prefix</span> status_count
</span><span class='line'>  <span class="nb">count_key</span> status
</span><span class='line'>  <span class="nb">pattern1</span> <span class="m">2</span>xx ^2..$
</span><span class='line'>  <span class="nb">pattern2</span> <span class="m">3</span>xx ^3..$
</span><span class='line'>  <span class="nb">pattern3</span> <span class="m">400</span> ^400$
</span><span class='line'>  <span class="nb">pattern4</span> <span class="m">4</span>xx ^4..$
</span><span class='line'>  <span class="nb">pattern5</span> <span class="m">503</span> ^503$
</span><span class='line'>  <span class="nb">pattern6</span> <span class="m">5</span>xx ^5..$
</span><span class='line'>  <span class="nb">output_per_tag</span> yes
</span><span class='line'><span class="nt">&lt;/match&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output messages become as followings (unnecessary fields are ommitted):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">status_count</span><span class="p">.</span><span class="nx">visualizer</span><span class="p">.</span><span class="nx">api_restful</span><span class="p">.</span><span class="nx">hosts</span><span class="p">.</span><span class="nx">host001</span><span class="o">:</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;2xx_count&quot;</span><span class="o">:</span><span class="mi">5</span><span class="p">,</span><span class="s2">&quot;3xx_count&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;400_count&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;4xx_count&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;503_count&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;5xx_count&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let us think of replacing this with Norikra.</p>

<h2>Data Counting using Norikra</h2>

<p>Referring the <a href="http://norikra.github.io/">document</a> of Norikra, and README of <a href="https://github.com/norikra/fluent-plugin-norikra">fluent-plugin-norikra</a>,
we will try to replace fluent-plugin-datacounter with out_norikra, Norikra Query (accurately, EPL of Esper), and in_norikra.</p>

<p><strong>in_norikra</strong></p>

<p>Configure Fluentd to receive data, and transfer the data to Norikra.</p>

<p>This configuration sets a <code>target</code> of Norikra (which are like the <code>table</code> of RDBMS) to be a <code>logname</code> of the &ldquo;visualizer.<em>logname</em>.<em>hostname</em>&rdquo; tag.
Also, this sets <code>hostname</code> to the <code>host</code> field of messages by extracting it from tags.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;source&gt;</span>
</span><span class='line'>  <span class="nb">type</span> forward
</span><span class='line'>  <span class="nb">port</span> <span class="m">24224</span>
</span><span class='line'><span class="nt">&lt;/source&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;match</span> <span class="s">visualizer.api_restful.**</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">type</span> record_reformer
</span><span class='line'>  <span class="nb">enable_ruby</span> false
</span><span class='line'>  <span class="nb">tag</span> reformed.${tag_prefix[-2]} # Remove the hostname from the tag
</span><span class='line'>  <span class="nt">&lt;record&gt;</span>
</span><span class='line'>    <span class="nb">host</span> ${tag_parts[-1]} # Set the hostname to `host` field to use in GROPU BY statement.
</span><span class='line'>  <span class="nt">&lt;/record&gt;</span>
</span><span class='line'><span class="nt">&lt;/match&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;match</span> <span class="s">reformed.visualizer.api_restful</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">type</span> norikra
</span><span class='line'>  <span class="nb">norikra</span> localhost:26571
</span><span class='line'>  <span class="nb">remove_tag_prefix</span> reformed.visualizer
</span><span class='line'>  <span class="nb">target_map_tag</span> true # target will be `api_restful`
</span><span class='line'>  <span class="nt">&lt;default&gt;</span>
</span><span class='line'>    <span class="nb">auto_field</span> false  # norikra includes fields only used in queries.
</span><span class='line'>  <span class="nt">&lt;/default&gt;</span>
</span><span class='line'><span class="nt">&lt;/match&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Norikra Query</strong></p>

<p>Surprisingly, <strong>we can write Java code</strong> in a Norikra query. So, we can realize same conditions with the case of fluent-plugin-datacounter by using <code>String#matches</code>.
Also, we can take couting for each host using <code>GROUP BY</code> statement. Cool.</p>

<p>EDIT: I replaced <code>COUNT(1, status.matches('^2..$'))</code> to <code>COUNT(1, status REGEXP '^2..$')</code> because the master <a href="https://twitter.com/tagomoris">tagomoris</a>, the author of Norikra, said the latter is better in performance. Thinking of performance, replacing REGEXP to LIKE, or converting status field to interger and using <code>COUNT(1, status / 100 = 2)</code> would achieve better performances.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># creation of a target</span>
</span><span class='line'>norikra-client target open api_restful
</span><span class='line'>
</span><span class='line'><span class="c"># all. `AS 2xx_count` was NG, so I made `As count_2xx`.</span>
</span><span class='line'>norikra-client query add status_count.all.api_restful <span class="s2">&quot;$(cat &lt;&lt;EOF</span>
</span><span class='line'><span class="s2">SELECT \</span>
</span><span class='line'><span class="s2">COUNT(1, status REGEXP &#39;^2..$&#39;) AS count_2xx, \</span>
</span><span class='line'><span class="s2">COUNT(1, status REGEXP &#39;^3..$&#39;) AS count_3xx, \</span>
</span><span class='line'><span class="s2">COUNT(1, status REGEXP &#39;^400$&#39;) AS count_400, \</span>
</span><span class='line'><span class="s2">COUNT(1, status REGEXP &#39;^4(?!00)..$&#39;) AS count_4xx, \</span>
</span><span class='line'><span class="s2">COUNT(1, status REGEXP &#39;^503$&#39;) AS count_503, \</span>
</span><span class='line'><span class="s2">COUNT(1, status REGEXP &#39;^5(?!03)..$&#39;) AS count_5xx \</span>
</span><span class='line'><span class="s2">FROM api_restful.win:time_batch(60 sec)</span>
</span><span class='line'><span class="s2">EOF</span>
</span><span class='line'><span class="s2">)&quot;</span>
</span><span class='line'><span class="c"># each host</span>
</span><span class='line'>norikra-client query add status_count.host.api_restful <span class="s2">&quot;$(cat &lt;&lt;EOF</span>
</span><span class='line'><span class="s2">SELECT \</span>
</span><span class='line'><span class="s2">host, \</span>
</span><span class='line'><span class="s2">COUNT(1, status REGEXP &#39;^2..$&#39;) AS count_2xx, \</span>
</span><span class='line'><span class="s2">COUNT(1, status REGEXP &#39;^3..$&#39;) AS count_3xx, \</span>
</span><span class='line'><span class="s2">COUNT(1, status REGEXP &#39;^400$&#39;) AS count_400, \</span>
</span><span class='line'><span class="s2">COUNT(1, status REGEXP &#39;^4(?!00)..$&#39;) AS count_4xx, \</span>
</span><span class='line'><span class="s2">COUNT(1, status REGEXP &#39;^503$&#39;) AS count_503, \</span>
</span><span class='line'><span class="s2">COUNT(1, status REGEXP &#39;^5(?!03)..$&#39;) AS count_5xx \</span>
</span><span class='line'><span class="s2">FROM api_restful.win:time_batch(60 sec) \</span>
</span><span class='line'><span class="s2">GROUP BY host</span>
</span><span class='line'><span class="s2">EOF</span>
</span><span class='line'><span class="s2">)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the query can be also constructed as followings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 2xx</span>
</span><span class='line'><span class="nv">$ </span>norikra-client query add status_count.all.2xx.api_restful <span class="se">\</span>
</span><span class='line'>  <span class="s2">&quot;SELECT COUNT(status) AS count_2xx \</span>
</span><span class='line'><span class="s2">  FROM api_restful.win:time_batch(60 sec) \</span>
</span><span class='line'><span class="s2">  WHERE status REGEXP &#39;^2..$&#39;&quot;</span>
</span><span class='line'><span class="c"># 3xx</span>
</span><span class='line'><span class="nv">$ </span>norikra-client query add status_count.all.3xx.api_restful <span class="se">\</span>
</span><span class='line'>  <span class="s2">&quot;SELECT COUNT(status) AS count_3xx \</span>
</span><span class='line'><span class="s2">  FROM api_restful.win:time_batch(60 sec) \</span>
</span><span class='line'><span class="s2">  WHERE status REGEXP &#39;^3..$&#39;&quot;</span>
</span><span class='line'><span class="c"># 400 </span>
</span><span class='line'><span class="c"># 4xx</span>
</span><span class='line'><span class="c"># 503</span>
</span><span class='line'><span class="c"># 5xx</span>
</span></code></pre></td></tr></table></div></figure>


<p>but, I felt preparing many queries make difficult to manage them. So, I prefered the former <code>COUNT(1, status REGEXP '^2..$')</code> way.</p>

<p><strong>in_norikra</strong></p>

<p>We configure Fluentd to retrieve results of Norikra in each 60 seconds.
Here, we set <code>tag query_name</code> so that the tag of retrieved messages to be the query name which we specified on <code>query add</code> commands.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;source&gt;</span>
</span><span class='line'>  <span class="nb">type</span> norikra
</span><span class='line'>  <span class="nb">norikra</span> localhost:26571
</span><span class='line'>  <span class="nt">&lt;fetch&gt;</span>
</span><span class='line'>    <span class="nb">method</span> event
</span><span class='line'>    <span class="nb">target</span> status_count.all.api_restful # query name
</span><span class='line'>    <span class="nb">tag</span> query_name
</span><span class='line'>    <span class="c"># tag string api_restful.status_count.all</span>
</span><span class='line'>    <span class="c"># tag field field_name</span>
</span><span class='line'>    <span class="nb">interval</span> <span class="m">60</span>s
</span><span class='line'>  <span class="nt">&lt;/fetch&gt;</span>
</span><span class='line'>  <span class="nt">&lt;fetch&gt;</span>
</span><span class='line'>    <span class="nb">method</span> event
</span><span class='line'>    <span class="nb">target</span> status_count.host.api_restful # query name
</span><span class='line'>    <span class="nb">tag</span> query_name
</span><span class='line'>    <span class="nb">interval</span> <span class="m">60</span>s
</span><span class='line'>  <span class="nt">&lt;/fetch&gt;</span>
</span><span class='line'><span class="nt">&lt;/source&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Done!</p>

<p>The output wil be as belows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">status_count</span><span class="p">.</span><span class="nx">host</span><span class="p">.</span><span class="nx">api_restful</span><span class="o">:</span>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;host&quot;</span><span class="o">:</span><span class="s2">&quot;host001&quot;</span><span class="p">,</span><span class="s2">&quot;count_2xx&quot;</span><span class="o">:</span><span class="mi">5</span><span class="p">,</span><span class="s2">&quot;count_3xx&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;count_400&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;count_4xx&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;count_503&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;count_5xx&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>I explained how to replace fluent-plugin-datacounter with Norikra. Try it out!</p>
]]></content>
  </entry>
  
</feed>
